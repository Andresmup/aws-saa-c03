#!/usr/bin/env bash

# Exit immediately if any command returns an error
set -e

#Check for the vpc name
if [ -z "$1" ]; then
    echo "A vpc name is need"
    exit 1
fi
VPC_NAME=$1

#Get the vpc-id base on the value associated to the tag Name.
VPC_ID=$(aws ec2 describe-vpcs --filters "Name=tag:Name,Values=$VPC_NAME" --query "Vpcs[*].VpcId" --output text)

#Get subnet of the vpc
SUBNET_ID=$(aws ec2 describe-subnets --filters "Name=vpc-id,Values=$VPC_ID" --query 'Subnets[].SubnetId[]' --output text)

#Get security group of the vpc
SG_ID=$(aws ec2 describe-security-groups --filters Name=vpc-id,Values=$VPC_ID --query 'SecurityGroups[].GroupId[]' --output text)

#Change security group properties
#Allow all http inbound
RETURN_1=$(aws ec2 authorize-security-group-ingress --group-id $SG_ID --protocol tcp --port 80 --cidr 0.0.0.0/0)

#Allow shh from my ip
aws ec2 authorize-security-group-ingress --group-id $SG_ID --protocol tcp --port 22 --cidr 18.206.107.24/29
aws ec2 authorize-security-group-ingress --group-id $SG_ID --protocol tcp --port 22 --cidr 191.82.29.209/32

#Create NACL on the vpc
aws ec2 create-network-acl --vpc-id $VPC_ID

#Get lastest amazon linux 2 AMI
AMI=$(aws ec2 describe-images \
--owners amazon \
--filters "Name=name,Values=amzn2-ami-hvm-*-x86_64-gp2" "Name=state,Values=available" \
--query "Images[?starts_with(Name, 'amzn2')]|sort_by(@, &CreationDate)[-1].ImageId" \
--region us-east-1 \
--output text)

#Launch instance on the network
aws ec2 run-instances --image-id $AMI --instance-type t2.micro --security-group-ids $SG_ID --subnet-id $SUBNET_ID --key-name saa-c03
